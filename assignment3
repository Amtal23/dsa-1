import java.util.*;

public class ShortestPath {
    static class Edge {
        int source, destination, weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }

    static class Graph {
        int vertices;
        List<Edge> edges;

        Graph(int vertices) {
            this.vertices = vertices;
            edges = new ArrayList<>();
        }

        void addEdge(int source, int destination, int weight) {
            edges.add(new Edge(source, destination, weight));
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Example graph data
        int vertices = 5;
        Graph graph = new Graph(vertices);
        graph.addEdge(0, 1, 6);
        graph.addEdge(0, 2, 7);
        graph.addEdge(1, 2, 8);
        graph.addEdge(1, 3, 5);
        graph.addEdge(1, 4, -4);
        graph.addEdge(2, 3, -3);
        graph.addEdge(2, 4, 9);
        graph.addEdge(3, 1, -2);
        graph.addEdge(4, 0, 2);
        graph.addEdge(4, 3, 7);

        System.out.println("Enter the source vertex:");
        int source = scanner.nextInt();

        long startTime, endTime;

        // Dijkstra's Algorithm
        startTime = System.currentTimeMillis();
        dijkstra(graph, source);
        endTime = System.currentTimeMillis();
        System.out.println("Dijkstra's Algorithm execution time: " + (endTime - startTime) + " ms");

        // Bellman-Ford Algorithm
        startTime = System.currentTimeMillis();
        bellmanFord(graph, source);
        endTime = System.currentTimeMillis();
        System.out.println("Bellman-Ford Algorithm execution time: " + (endTime - startTime) + " ms");
    }

    private static void dijkstra(Graph graph, int source) {
        int vertices = graph.vertices;
        int[] dist = new int[vertices];
        boolean[] visited = new boolean[vertices];

        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        pq.add(new int[]{source, 0});

        while (!pq.isEmpty()) {
            int[] node = pq.poll();
            int u = node[0];

            if (visited[u]) continue;
            visited[u] = true;

            for (Edge edge : graph.edges) {
                if (edge.source == u) {
                    int v = edge.destination;
                    int weight = edge.weight;
                    if (!visited[v] && dist[u] + weight < dist[v]) {
                        dist[v] = dist[u] + weight;
                        pq.add(new int[]{v, dist[v]});
                    }
                }
            }
        }

        printSolution("Dijkstra", source, dist);
    }

    private static void bellmanFord(Graph graph, int source) {
        int vertices = graph.vertices;
        int[] dist = new int[vertices];

        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        for (int i = 1; i < vertices; ++i) {
            for (Edge edge : graph.edges) {
                int u = edge.source;
                int v = edge.destination;
                int weight = edge.weight;
                if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                }
            }
        }

        for (Edge edge : graph.edges) {
            int u = edge.source;
            int v = edge.destination;
            int weight = edge.weight;
            if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                System.out.println("Graph contains negative weight cycle");
                return;
            }
        }

        printSolution("Bellman-Ford", source, dist);
    }

    private static void printSolution(String algorithm, int source, int[] dist) {
        System.out.println(algorithm + " Algorithm:");
        System.out.println("Vertex Distance from Source " + source);
        for (int i = 0; i < dist.length; ++i)
            System.out.println(i + "\t\t" + dist[i]);
    }
}
